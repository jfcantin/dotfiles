" Make Vim more useful

" =============== Vundle Initialization ===============
" This loads all the plugins specified in ~/.vim/vundle.vim
" Use Vundle plugin to manage all other plugins
source ~/.vim/vundles.vim

set nocompatible
" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" Enhance command-line completion
set wildmenu
" Allow cursor keys in insert mode
set esckeys
" Allow backspace in insert mode
set backspace=indent,eol,start
" Optimize for fast terminal connections
set ttyfast
" Add the g flag to search/replace by default
set gdefault
" Use UTF-8 without BOM
set encoding=utf-8 nobomb
" Change mapleader
let mapleader=","
let g:mapleader=","

" Don’t add empty newlines at the end of files
set binary
set noeol

" Centralize backups, swapfiles and undo history
set noswapfile
set nobackup
set nowb
if exists("&undodir")
  set undodir=~/.vim/undo
endif

" Save before switching buffer and exiting
set autowriteall


" Respect modeline in files
set modeline
set modelines=4
" Enable per-directory .vimrc files and disable unsafe commands in them

set exrc
set secure
" Enable line numbers
set number
" Enable syntax highlighting
syntax on
" Highlight current line
set cursorline
" Make tabs as wide as two spaces
set autoindent
set tabstop=2
set shiftwidth=2
set expandtab
set nowrap
" Show “invisible” characters
" set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set lcs=tab:▸\ ,trail:·,nbsp:_
set list
" Highlight searches
set hlsearch
" Ignore case of searches
set ignorecase
" Highlight dynamically as pattern is typed
set incsearch
" Always show status line
set laststatus=2
" Enable mouse in all modes
set mouse=a
" Disable error bells
set noerrorbells
" Don’t reset cursor to start of line when moving around.
set nostartofline
" Show the cursor position
set ruler
" Don’t show the intro message when starting Vim
set shortmess=atI
" Show the current mode
set showmode
" Show the filename in the window titlebar
set title
" Show the (partial) command as it’s being typed
set showcmd
" Use relative line numbers
if exists("&relativenumber")
  set relativenumber
  au BufReadPost * set relativenumber
endif
" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Strip trailing whitespace (,ss)
function! StripWhitespace()
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  :%s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

noremap <Leader>ss :call StripWhitespace()<CR>

" Save a file as root (,W)
noremap <Leader>W :w !sudo tee % > /dev/null<CR>

map <Leader>w :w<CR>
imap <Leader>w <ESC>:w<CR>
vmap <Leader>w <ESC><ESC>:w<CR>

inoremap jj <esc>l
"nnoremap JJJJ <nop>
map j gj
map k gk

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer (w/o closing the current window)
map <leader>bd :Bclose<cr>


map <Leader><space> :nohl<CR>
nmap <Leader>V :source $MYVIMRC<CR>
nmap <Leader>v :vsp $MYVIMRC<CR>

" Highlight trailing space
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Automatic commands
if has("autocmd")
  "reload vimrc on save
  autocmd bufwritepost .vimrc source $MYVIMRC
  " Enable file type detection
  filetype on
  " Treat .json files as .js
  autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript

  " file-tyep definition for RUN, REPL, DEBUG
  autocmd BufNewFile,BufRead *.m let b:comp = ["octave", "octave -i", "octave"]
  autocmd BufNewFile,BufRead *.py let b:comp = ["python", "python", "python -m pdb"]
  nmap <Leader>r :exec "!" b:comp[0] " %"<CR>
  nmap <Leader>i :exec "!" b:comp[1]<CR>
  nmap <Leader>d :exec "!" b:comp[2] " %"<CR>
endif

" ====
"  Plugins
" ====

" NERDTree
"
" General properties
let NERDTreeDirArrows=1
let NERDTreeMinimalUI=1
let NERDTreeIgnore=['\.o$', '\.pyc$', '\.php\~$']
let NERDTreeWinSize = 35

" Make sure that when NT root is changed, Vim's pwd is also updated
let NERDTreeChDirMode = 2
let NERDTreeShowLineNumbers = 1
let NERDTreeAutoCenter = 1

" Open NERDTree on startup, when no file has been specified
autocmd VimEnter * if !argc() | NERDTree | endif

" Locate file in hierarchy quickly
map <leader>T :NERDTreeFind<cr>

" Toogle on/off
nmap <leader>o :NERDTreeToggle<cr>

" ===
" Fugitive
" ===
map <leader>gdi :Gdiff<cr>
map <leader>gst :Gstatus<cr>
map <leader>dup :diffupdate<cr>


" ===
" ctrl-p configuration
" ===
"
"  let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
"  let g:ctrlp_custom_ignore = {
"    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
"    \ 'file': '\v\.(exe|so|dll)$',
"    \ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
"    \ }
"  let g:ctrlp_custom_ignore = {
"    \ 'file': '\v(\.cpp|\.h|\.hh|\.cxx)@<!$'
"    \ }
set wildignore+=*/tmp/*,*.swp,*.zip
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|node_modules|bower_components|_build|deps)$'
"  let g:ctrlp_user_command = [
"      \ '.git', 'cd %s && git ls-files . -co --exclude-standard',
"      \ 'find %s -type f'
"      \ ]

" ===
" Syntastic
" ===
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_python_exec = '/usr/local/bin/python3'
"let g:syntastic_enable_r_lintr_checker = 1
"let g:syntastic_r_checkers = 1
"let g:syntastic_rmd_checkers = 1
"let g:syntastic_r_lintr_linters = "with_defaults(line_length_linter(120))"

" ===
" VIM Airline
" === 
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.whitespace = 'Ξ'

" ===
" bookdown
" ===
map <leader>bb :!./_build.sh<CR>
map <leader>bbo :!open _book/index.html<CR>

" ===
" Elixir
" ===
"run tests right from vim - super helpful
map <Leader>mt :!mix test<CR>


" Lines added by the Vim-R-plugin command :RpluginConfig (2014-Jun-28 12:25):
"filetype plugin on
"filetype indent on
"" Change the <LocalLeader> key:
"let maplocalleader = ","
"" Use Ctrl+Space to do omnicompletion:
"if has("gui_running")
"    inoremap <C-Space> <C-x><C-o>
"else
"    inoremap <Nul> <C-x><C-o>
"endif
"" Press the space bar to send lines (in Normal mode) and selections to R:
"vmap <Space> <Plug>RDSendSelection
"nmap <Space> <Plug>RDSendLine
"
"let vimrplugin_applescript = 0
"let vimrplugin_screenplugin = 0

" Force Vim to use 256 colors if running in a capable terminal emulator:
if &term =~ "xterm" || &term =~ "256" || $DISPLAY != "" || $HAS_256_COLORS == "yes"
    set t_Co=256
endif

" There are hundreds of color schemes for Vim on the internet, but you can
" start with color schemes already installed.
" Click on GVim menu bar "Edit / Color scheme" to know the name of your
" preferred color scheme, then, remove the double quote (which is a comment
" character, like the # is for R language) and replace the value "not_defined"
" below:

"set background=light
"colorscheme molokai