# Add `~/bin` and gobin to the `$PATH`
export PATH="$HOME/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:$PATH"
export GOPATH=$(go env GOPATH)
export PATH="$PATH:$GOPATH/bin"
#export PATH="$HOME/bin:$HOME/go/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:$PATH"

# load all bash files and source them
for file in ~/.dotfiles/bash/*.bash
do
	echo "Source: $file"
	[ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

# Load the shell dotfiles, and then some:
# * ~/.path can be used to extend `$PATH`.
# * ~/.extra can be used for other settings you donâ€™t want to commit.
for file in ~/.extra; do
	echo "Source: $file"
	[ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

# Case-insensitive globbing (used in pathname expansion)
shopt -s nocaseglob

# Append to the Bash history file, rather than overwriting it
shopt -s histappend

# Autocorrect typos in path names when using `cd`
shopt -s cdspell

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2> /dev/null
done

# Add tab completion for SSH hostnames based on ~/.ssh/config, ignoring wildcards
[ -e "$HOME/.ssh/config" ] && complete -o "default" -o "nospace" -W "$(grep "^Host" ~/.ssh/config | grep -v "[?*]" | cut -d " " -f2 | tr ' ' '\n')" scp sftp ssh

# Add tab completion for `defaults read|write NSGlobalDomain`
# You could just use `-g` instead, but I like being explicit
complete -W "NSGlobalDomain" defaults

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall

# If possible, add tab completion for many more commands
[ -f /etc/bash_completion ] && source /etc/bash_completion

# Add the following to your ~/.bash_profile:
# if [ -f $(brew --prefix)/share/bash-completion/bash_completion ]; then
#   . $(brew --prefix)/share/bash-completion/bash_completion
# fi

# Add autojump
# [[ -s `brew --prefix`/etc/autojump.sh ]] && . `brew --prefix`/etc/autojump.sh
#[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# aspnet kvm
#source kvm.sh
#[ -s "/Users/jfcantin/.dnx/dnvm/dnvm.sh" ] && . "/Users/jfcantin/.dnx/dnvm/dnvm.sh" # Load dnvm

# Tab completion for brew
# source `brew --repository`/Library/Contributions/brew_bash_completion.sh


#docker 
# function cleandocker {
#   EXITED=$(docker ps -q -f status=exited)
#   DANGLING=$(docker images -q -f "dangling=true")
# 
#   if [ "$1" == "--dry-run" ]; then
#     echo "==> Would stop containers:"
#     echo $EXITED
#     echo "==> And images:"
#     echo $DANGLING
#   else
#     if [ -n "$EXITED" ]; then
#       docker rm $EXITED
#     else
#       echo "No containers to remove."
#     fi
#     if [ -n "$DANGLING" ]; then
#       docker rmi $DANGLING
#     else
#       echo "No images to remove."
#     fi
#   fi
# }
# 
# # docker python
# dpython(){
#   #docker run -v $PWD:/home/jovyan/work --rm -it jf/scipy-notebook python "$@"
#   docker start dato
#   docker exec -it dato python "$@"
# }
# dipython() {
#   #docker run -v $PWD:/home/jovyan/work --rm -it jf/scipy-notebook ipython
#   docker start dato
#   docker exec -it dato ipython
# }

djupyter() {
  (sleep 3 && open "http://localhost:8888")&
  #   #docker run -v $PWD:/home/jovyan/work -p 8888:8888 --rm -it jupyter/scipy-notebook jupyter notebook --no-browser --ip="\*" --notebook-dir=/tmp/working
  # docker run -v $PWD:/home/jovyan/work -p 8888:8888 --rm -it jfcantin/scipy-notebook:0.1
  # docker run -v $PWD:/home/jovyan/work -p 8888:8888 --rm -it jfcantin/scipy-notebook:0.1
  docker start dato
}
ljupyter() {
  ~/anaconda3/bin/jupyter notebook
}

jlab() {
  ~/anaconda3/bin/jupyter lab
}
